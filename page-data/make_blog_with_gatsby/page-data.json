{"componentChunkName":"component---src-templates-blog-post-js","path":"/make_blog_with_gatsby/","result":{"data":{"site":{"siteMetadata":{"title":"アウトプット用ブログ"}},"markdownRemark":{"id":"0d78fbb9-737f-526b-9e5e-f5ae8cbe54a9","excerpt":"はじめに Gatsby+GithubPagesによるブログ環境構築についてまとめる。 構築メモ ツールの選定背景 静的サイトジェネレータに触れてみたかったため、https://jamstack.org/generators/ で人気のあるものから選ぶことにした。\n言語的にはRubyとVue.js…","html":"<h1>はじめに</h1>\n<p>Gatsby+GithubPagesによるブログ環境構築についてまとめる。</p>\n<h1>構築メモ</h1>\n<h2>ツールの選定背景</h2>\n<p>静的サイトジェネレータに触れてみたかったため、<a href=\"https://jamstack.org/generators/\">https://jamstack.org/generators/</a> で人気のあるものから選ぶことにした。\n言語的にはRubyとVue.jsの経験があるが、今回はフロントエンドということでJavaScript製のもの（Next.js、Gatsby）を優先することにした。<a href=\"https://gotohayato.com/content/511/\">https://gotohayato.com/content/511/</a>  の比較記事を参考に、Gatsbyを使うこととした。</p>\n<p>デプロイ先は、現在使用中のサービスの中で使えるということでGithubPagesを選んだ。</p>\n<h2>実現したい構成</h2>\n<ol>\n<li>ローカルで記事を書き、ビルドする</li>\n<li>GitHubへpushする</li>\n<li>ブログが公開される</li>\n</ol>\n<p>なお、Gatsby公式のチュートリアルではGatsbyクラウドでビルドする方法が紹介されているが、今回はシンプルな構成にしたいので上記の通りで進める。</p>\n<h2>環境構築</h2>\n<p>Ubuntu on WSL2 on Windows11環境で作業する。</p>\n<p>まずは、<a href=\"https://www.gatsbyjs.com/docs/tutorial/part-0/\">https://www.gatsbyjs.com/docs/tutorial/part-0/</a> に従ってGatsby CLIをインストールする。基本的には書いてある通りだが、curlでnvmをインストールした後に、<code class=\"language-text\">source ~/.bashrc</code>を実行した。（nvmへのパスを通すため。代わりに、WSLのシェルを落として再接続しても良い）</p>\n<p>次に、<a href=\"https://www.gatsbyjs.com/docs/tutorial/part-1/\">https://www.gatsbyjs.com/docs/tutorial/part-1/</a> の下記手順を実行した。なお、今回GatsbyCloudは使わないため、「Build your site with Gatsby Cloud」は実行しない。</p>\n<ul>\n<li>Create a Gatsby site</li>\n<li>Run your site locally</li>\n<li>Set up a GitHub repo for your site</li>\n</ul>\n<p>Gatsbyにはサイトテンプレートの機能があり、<a href=\"https://www.gatsbyjs.com/starters/\">https://www.gatsbyjs.com/starters/</a> で公開されているものから選べる。今回は<a href=\"https://github.com/gatsbyjs/gatsby-starter-blog%E3%82%92%E4%BD%BF%E3%81%86%E3%81%93%E3%81%A8%E3%81%AB%E3%81%97%E3%81%9F%E3%81%9F%E3%82%81%E3%80%81%60gatsby\">https://github.com/gatsbyjs/gatsby-starter-blogを使うことにしたため、`gatsby</a> new<code class=\"language-text\">は、</code>gatsby new blog <a href=\"https://github.com/gatsbyjs/gatsby-starter-blog%60%E3%81%A8%E3%81%97%E3%81%A6%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%9F%E3%80%82%EF%BC%88blog%E3%81%AF%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%90%8D%EF%BC%89\">https://github.com/gatsbyjs/gatsby-starter-blog`として実行した。（blogはリポジトリ名）</a></p>\n<p>ローカルのGatsbyディレクトリとGitHubのリポジトリを紐づける手順については、以下の通り行った。（<code class=\"language-text\">git init</code>を行わないと、Gatsbyディレクトリがgit管理とみなされず、その後の<code class=\"language-text\">git remote add</code>が失敗する。<code class=\"language-text\">git add .</code>と<code class=\"language-text\">git commit</code>を行わないと、ローカルにmasterブランチが存在しないため、その後の<code class=\"language-text\">git branch</code>が失敗する）</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git init\ngit remote add origin https://github.com/YOUR_GITHUB_USERNAME/YOUR_GITHUB_REPO_NAME.git\n\ngit add .\ngit commit\ngit branch -M main\ngit push -u origin main</code></pre></div>\n<p>ここまでで、GitHubリポジトリのmasterブランチがmainブランチに切り替わり、mainブランチ内にソースコードが置かれるようになった。公開するのはソースコードではなくビルドした結果の方なので、そちらの設定も行っていく。</p>\n<p>GithubPagesの公開URLは、<a href=\"https://%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%90%8D.github.io/%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%90%8D\">https://アカウント名.github.io/リポジトリ名</a> となる。リポジトリ名部分のパスをコンフィグで設定する。リポジトリ名が「blog」の場合は以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vi gatsby-config.js\n-----\nmodule.exports = {\n  pathPrefix: `/blog`, ★追記</code></pre></div>\n<p>ソースコードはmainブランチに入れたが、公開用資材（publicフォルダ）はgh-pagesブランチに入れる。そのあたりの処理（リモートリポジトリでgh-pagesブランチを作り、publicフォルダの中身だけをpush？）をうまいことやってくれるパッケージがあるため、インストールする。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g gh-pages --save-dev</code></pre></div>\n<h2>記事更新＆公開</h2>\n<p>content/[リポジトリ名]配下のフォルダがブログ記事になる。</p>\n<p><code class=\"language-text\">gatsby develop</code>で検証用ビルド&#x26;ローカルサーバ立ち上げを行える。<a href=\"http://localhost:8000/\">http://localhost:8000/</a> へアクセスすると、編集内容を確認できるので、想定通りの表示イメージになるまで編集を続ける。</p>\n<p>編集が済んだら、<code class=\"language-text\">gatsby build --prefix-paths</code>で本番ビルドを行う。（prefix-pathsはconfigで設定した項目）。</p>\n<p>本番ビルドに成功したら、<code class=\"language-text\">gh-pages -d public</code>でサイトを公開する。</p>\n<p>また、サイト公開には影響ないが、<code class=\"language-text\">git push origin master</code>でソースコードの方もpushする。</p>\n<h2>カスタマイズ</h2>\n<p>素のままだと、<a href=\"https://github.com/gatsbyjs/gatsby-starter-blog\">https://github.com/gatsbyjs/gatsby-starter-blog</a> の作者の情報が入っているため、以下のファイルを書き換える。</p>\n<p>gatsby-config.js\nsrc/components/bio.js</p>\n<h2>GitHubでssh key使用</h2>\n<p>いつのまにかパスワード認証ができなくなっていたため、ssh鍵の作成、GitHubへの公開鍵の登録を行った。以下のコマンドはWSLの環境が再起動される度に実施する必要あり。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519</code></pre></div>\n<h2>参考</h2>\n<p><a href=\"https://kanamesasaki.github.io/blog/20220124-gatsby-blog/\">GatsbyとGitHub Pagesで作るMarkdownブログ</a></p>\n<p><a href=\"https://kohsuk.tech/2020/11/25/\">GatsbyJSとTypeScriptでブログを作成して公開する(2)</a></p>\n<p><a href=\"https://crimsonality.net/gatsby/customize-practice/\">gatsby-starter-blogで作成したブログをカスタマイズする</a></p>","frontmatter":{"title":"Gatsby+GithubPagesによるブログ環境構築","date":"July 25, 2022","description":null}},"previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null},"pageContext":{"id":"0d78fbb9-737f-526b-9e5e-f5ae8cbe54a9","previousPostId":"61dbd6fb-4d3b-5d6c-815d-790d8bd60ef2","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}