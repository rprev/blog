<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[.]]></description><link>https://rprev.github.io/blog</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 24 Jul 2022 23:12:34 GMT</lastBuildDate><item><title><![CDATA[Gatsby+GithubPagesによるブログ環境構築]]></title><description><![CDATA[はじめに Gatsby+GithubPagesによるブログ環境構築についてまとめる。 構築メモ ツールの選定背景 静的サイトジェネレータに触れてみたかったため、https://jamstack.org/generators…]]></description><link>https://rprev.github.io/blog/make_blog_with_gatsby/</link><guid isPermaLink="false">https://rprev.github.io/blog/make_blog_with_gatsby/</guid><pubDate>Mon, 25 Jul 2022 08:10:00 GMT</pubDate><content:encoded>&lt;h1&gt;はじめに&lt;/h1&gt;
&lt;p&gt;Gatsby+GithubPagesによるブログ環境構築についてまとめる。&lt;/p&gt;
&lt;h1&gt;構築メモ&lt;/h1&gt;
&lt;h2&gt;ツールの選定背景&lt;/h2&gt;
&lt;p&gt;静的サイトジェネレータに触れてみたかったため、&lt;a href=&quot;https://jamstack.org/generators/&quot;&gt;https://jamstack.org/generators/&lt;/a&gt; で人気のあるものから選ぶことにした。
言語的にはRubyとVue.jsの経験があるが、今回はフロントエンドということでJavaScript製のもの（Next.js、Gatsby）を優先することにした。&lt;a href=&quot;https://gotohayato.com/content/511/&quot;&gt;https://gotohayato.com/content/511/&lt;/a&gt;  の比較記事を参考に、Gatsbyを使うこととした。&lt;/p&gt;
&lt;p&gt;デプロイ先は、現在使用中のサービスの中で使えるということでGithubPagesを選んだ。&lt;/p&gt;
&lt;h2&gt;実現したい構成&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ローカルで記事を書き、ビルドする&lt;/li&gt;
&lt;li&gt;GitHubへpushする&lt;/li&gt;
&lt;li&gt;ブログが公開される&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;なお、Gatsby公式のチュートリアルではGatsbyクラウドでビルドする方法が紹介されているが、今回はシンプルな構成にしたいので上記の通りで進める。&lt;/p&gt;
&lt;h2&gt;環境構築&lt;/h2&gt;
&lt;p&gt;Ubuntu on WSL2 on Windows11環境で作業する。&lt;/p&gt;
&lt;p&gt;まずは、&lt;a href=&quot;https://www.gatsbyjs.com/docs/tutorial/part-0/&quot;&gt;https://www.gatsbyjs.com/docs/tutorial/part-0/&lt;/a&gt; に従ってGatsby CLIをインストールする。基本的には書いてある通りだが、curlでnvmをインストールした後に、&lt;code class=&quot;language-text&quot;&gt;source ~/.bashrc&lt;/code&gt;を実行した。（nvmへのパスを通すため。代わりに、WSLのシェルを落として再接続しても良い）&lt;/p&gt;
&lt;p&gt;次に、&lt;a href=&quot;https://www.gatsbyjs.com/docs/tutorial/part-1/&quot;&gt;https://www.gatsbyjs.com/docs/tutorial/part-1/&lt;/a&gt; の下記手順を実行した。なお、今回GatsbyCloudは使わないため、「Build your site with Gatsby Cloud」は実行しない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Gatsby site&lt;/li&gt;
&lt;li&gt;Run your site locally&lt;/li&gt;
&lt;li&gt;Set up a GitHub repo for your site&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gatsbyにはサイトテンプレートの機能があり、&lt;a href=&quot;https://www.gatsbyjs.com/starters/&quot;&gt;https://www.gatsbyjs.com/starters/&lt;/a&gt; で公開されているものから選べる。今回は&lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog%E3%82%92%E4%BD%BF%E3%81%86%E3%81%93%E3%81%A8%E3%81%AB%E3%81%97%E3%81%9F%E3%81%9F%E3%82%81%E3%80%81%60gatsby&quot;&gt;https://github.com/gatsbyjs/gatsby-starter-blogを使うことにしたため、`gatsby&lt;/a&gt; new&lt;code class=&quot;language-text&quot;&gt;は、&lt;/code&gt;gatsby new blog &lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog%60%E3%81%A8%E3%81%97%E3%81%A6%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%9F%E3%80%82%EF%BC%88blog%E3%81%AF%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%90%8D%EF%BC%89&quot;&gt;https://github.com/gatsbyjs/gatsby-starter-blog`として実行した。（blogはリポジトリ名）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ローカルのGatsbyディレクトリとGitHubのリポジトリを紐づける手順については、以下の通り行った。（&lt;code class=&quot;language-text&quot;&gt;git init&lt;/code&gt;を行わないと、Gatsbyディレクトリがgit管理とみなされず、その後の&lt;code class=&quot;language-text&quot;&gt;git remote add&lt;/code&gt;が失敗する。&lt;code class=&quot;language-text&quot;&gt;git add .&lt;/code&gt;と&lt;code class=&quot;language-text&quot;&gt;git commit&lt;/code&gt;を行わないと、ローカルにmasterブランチが存在しないため、その後の&lt;code class=&quot;language-text&quot;&gt;git branch&lt;/code&gt;が失敗する）&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git init
git remote add origin https://github.com/YOUR_GITHUB_USERNAME/YOUR_GITHUB_REPO_NAME.git

git add .
git commit
git branch -M main
git push -u origin main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでで、GitHubリポジトリのmasterブランチがmainブランチに切り替わり、mainブランチ内にソースコードが置かれるようになった。公開するのはソースコードではなくビルドした結果の方なので、そちらの設定も行っていく。&lt;/p&gt;
&lt;p&gt;GithubPagesの公開URLは、&lt;a href=&quot;https://%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%90%8D.github.io/%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%90%8D&quot;&gt;https://アカウント名.github.io/リポジトリ名&lt;/a&gt; となる。リポジトリ名部分のパスをコンフィグで設定する。リポジトリ名が「blog」の場合は以下の通り。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vi gatsby-config.js
-----
module.exports = {
  pathPrefix: `/blog`, ★追記&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ソースコードはmainブランチに入れたが、公開用資材（publicフォルダ）はgh-pagesブランチに入れる。そのあたりの処理（リモートリポジトリでgh-pagesブランチを作り、publicフォルダの中身だけをpush？）をうまいことやってくれるパッケージがあるため、インストールする。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -g gh-pages --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;記事更新＆公開&lt;/h2&gt;
&lt;p&gt;content/[リポジトリ名]配下のフォルダがブログ記事になる。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby develop&lt;/code&gt;で検証用ビルド&amp;#x26;ローカルサーバ立ち上げを行える。&lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt; へアクセスすると、編集内容を確認できるので、想定通りの表示イメージになるまで編集を続ける。&lt;/p&gt;
&lt;p&gt;編集が済んだら、&lt;code class=&quot;language-text&quot;&gt;gatsby build --prefix-paths&lt;/code&gt;で本番ビルドを行う。（prefix-pathsはconfigで設定した項目）。&lt;/p&gt;
&lt;p&gt;本番ビルドに成功したら、&lt;code class=&quot;language-text&quot;&gt;gh-pages -d public&lt;/code&gt;でサイトを公開する。&lt;/p&gt;
&lt;p&gt;また、サイト公開には影響ないが、&lt;code class=&quot;language-text&quot;&gt;git push origin master&lt;/code&gt;でソースコードの方もpushする。&lt;/p&gt;
&lt;h2&gt;カスタマイズ&lt;/h2&gt;
&lt;p&gt;素のままだと、&lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog&quot;&gt;https://github.com/gatsbyjs/gatsby-starter-blog&lt;/a&gt; の作者の情報が入っているため、以下のファイルを書き換える。&lt;/p&gt;
&lt;p&gt;gatsby-config.js
src/components/bio.js&lt;/p&gt;
&lt;h2&gt;GitHubでssh key使用&lt;/h2&gt;
&lt;p&gt;いつのまにかパスワード認証ができなくなっていたため、ssh鍵の作成、GitHubへの公開鍵の登録を行った。以下のコマンドはWSLの環境が再起動される度に実施する必要あり。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;eval &quot;$(ssh-agent -s)&quot;
ssh-add ~/.ssh/id_ed25519&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://kanamesasaki.github.io/blog/20220124-gatsby-blog/&quot;&gt;GatsbyとGitHub Pagesで作るMarkdownブログ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kohsuk.tech/2020/11/25/&quot;&gt;GatsbyJSとTypeScriptでブログを作成して公開する(2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://crimsonality.net/gatsby/customize-practice/&quot;&gt;gatsby-starter-blogで作成したブログをカスタマイズする&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[Hello World hello world !!]]></description><link>https://rprev.github.io/blog/hello-world/</link><guid isPermaLink="false">https://rprev.github.io/blog/hello-world/</guid><pubDate>Sun, 24 Jul 2022 11:17:00 GMT</pubDate><content:encoded>&lt;h1&gt;Hello World&lt;/h1&gt;
&lt;p&gt;hello world !!&lt;/p&gt;</content:encoded></item></channel></rss>